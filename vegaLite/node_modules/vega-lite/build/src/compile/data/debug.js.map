{"version":3,"file":"debug.js","sourceRoot":"","sources":["../../../../src/compile/data/debug.ts"],"names":[],"mappings":"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","sourcesContent":["import {entries, keys, uniqueId} from './../../util';\nimport {DataFlowNode} from './dataflow';\n\n/**\n * Print debug information for dataflow tree.\n */\nexport function debug(node: DataFlowNode) {\n  console.log(\n    `${(node.constructor as any).name}${node.debugName ? `(${node.debugName})` : ''} -> ${node.children.map(c => {\n      return `${(c.constructor as any).name}${c.debugName ? ` (${c.debugName})` : ''}`;\n    })}`\n  );\n  console.log(node);\n  node.children.forEach(debug);\n}\n\n/**\n * Print the dataflow tree as graphviz.\n *\n * Render the output in http://viz-js.com/.\n */\nexport function draw(roots: DataFlowNode[]) {\n  // check the graph before printing it since the logic below assumes a consistent graph\n  checkLinks(roots);\n\n  const nodes: {[key: string]: {id: string | number; label: string; hash: string | number}} = {};\n  const edges: [string, string][] = [];\n\n  function getId(node: DataFlowNode) {\n    let id = node['__uniqueid'];\n    if (id === undefined) {\n      id = uniqueId();\n      node['__uniqueid'] = id;\n    }\n    return id;\n  }\n\n  function getLabel(node: DataFlowNode) {\n    const out = [(node.constructor as any).name.slice(0, -4)];\n\n    if (node.debugName) {\n      out.push(`<i>${node.debugName}</i>`);\n    }\n\n    const dep = node.dependentFields();\n    if (keys(dep).length) {\n      out.push(`<font color=\"grey\" point-size=\"10\">IN:</font> ${keys(node.dependentFields()).join(', ')}`);\n    }\n    const prod = node.producedFields();\n    if (keys(prod).length) {\n      out.push(`<font color=\"grey\" point-size=\"10\">OUT:</font> ${keys(node.producedFields()).join(', ')}`);\n    }\n    return out.join('<br/>');\n  }\n\n  function collector(node: DataFlowNode) {\n    const id = getId(node);\n    nodes[id] = {\n      id: id,\n      label: getLabel(node),\n      hash: String(node.hash()).replace(/\"/g, '')\n    };\n\n    for (const child of node.children) {\n      edges.push([id, getId(child)]);\n      collector(child);\n    }\n  }\n\n  roots.forEach(n => collector(n));\n\n  const dot = `digraph DataFlow {\n  rankdir = TB;\n  node [shape=record]\n  ${entries(nodes)\n    .map(\n      ({key, value}) => `  \"${key}\" [\n    label = <${value.label}>;\n    tooltip = \"[${value.id}]&#010;${value.hash}\"\n  ]`\n    )\n    .join('\\n')}\n\n  ${edges.map(([source, target]) => `\"${source}\" -> \"${target}\"`).join(' ')}\n}`;\n\n  console.log(dot);\n\n  return dot;\n}\n\n/**\n * Iterates over a dataflow graph and checks whether all links are consistent.\n */\nexport function checkLinks(nodes: DataFlowNode[]): boolean {\n  for (const node of nodes) {\n    for (const child of node.children) {\n      if (child.parent !== node) {\n        console.error('Dataflow graph is inconsistent.', parent, child);\n        return false;\n      }\n    }\n\n    if (!checkLinks(node.children)) {\n      return false;\n    }\n  }\n\n  return true;\n}\n"]}