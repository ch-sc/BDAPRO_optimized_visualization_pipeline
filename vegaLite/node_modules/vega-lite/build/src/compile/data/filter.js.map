{"version":3,"file":"filter.js","sourceRoot":"","sources":["../../../../src/compile/data/filter.ts"],"names":[],"mappings":";AACA,OAAO,EAAC,UAAU,EAAY,MAAM,iBAAiB,CAAC;AACtD,OAAO,EAAC,SAAS,EAAY,MAAM,YAAY,CAAC;AAGhD,OAAO,EAAC,YAAY,EAAC,MAAM,YAAY,CAAC;AACxC,OAAO,EAAC,kBAAkB,EAAC,MAAM,eAAe,CAAC;AAEjD;IAAgC,sCAAY;IAO1C,oBAAY,MAAoB,EAAmB,KAAY,EAAmB,MAAiC;QAAnH,YACE,kBAAM,MAAM,CAAC,SAOd;QARkD,WAAK,GAAL,KAAK,CAAO;QAAmB,YAAM,GAAN,MAAM,CAA2B;QAGjH,6CAA6C;QAC7C,8FAA8F;QAC9F,KAAI,CAAC,IAAI,GAAG,UAAU,CAAC,KAAI,CAAC,KAAK,EAAE,KAAI,CAAC,MAAM,EAAE,KAAI,CAAC,CAAC;QAEtD,KAAI,CAAC,gBAAgB,GAAG,kBAAkB,CAAC,KAAI,CAAC,IAAI,CAAC,CAAC;;IACxD,CAAC;IAZM,0BAAK,GAAZ;QACE,OAAO,IAAI,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,EAAE,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;IAClE,CAAC;IAYM,oCAAe,GAAtB;QACE,OAAO,IAAI,CAAC,gBAAgB,CAAC;IAC/B,CAAC;IAEM,6BAAQ,GAAf;QACE,OAAO;YACL,IAAI,EAAE,QAAQ;YACd,IAAI,EAAE,IAAI,CAAC,IAAI;SAChB,CAAC;IACJ,CAAC;IAEM,yBAAI,GAAX;QACE,OAAO,YAAU,IAAI,CAAC,IAAM,CAAC;IAC/B,CAAC;IACH,iBAAC;AAAD,CAAC,AA/BD,CAAgC,YAAY,GA+B3C","sourcesContent":["import {LogicalOperand} from '../../logical';\nimport {expression, Predicate} from '../../predicate';\nimport {duplicate, StringSet} from '../../util';\nimport {VgFilterTransform} from '../../vega.schema';\nimport {Model} from '../model';\nimport {DataFlowNode} from './dataflow';\nimport {getDependentFields} from './expressions';\n\nexport class FilterNode extends DataFlowNode {\n  private expr: string;\n  private _dependentFields: StringSet;\n  public clone() {\n    return new FilterNode(null, this.model, duplicate(this.filter));\n  }\n\n  constructor(parent: DataFlowNode, private readonly model: Model, private readonly filter: LogicalOperand<Predicate>) {\n    super(parent);\n\n    // TODO: refactor this to not take a node and\n    // then add a static function makeFromOperand and make the constructor take only an expression\n    this.expr = expression(this.model, this.filter, this);\n\n    this._dependentFields = getDependentFields(this.expr);\n  }\n\n  public dependentFields() {\n    return this._dependentFields;\n  }\n\n  public assemble(): VgFilterTransform {\n    return {\n      type: 'filter',\n      expr: this.expr\n    };\n  }\n\n  public hash() {\n    return `Filter ${this.expr}`;\n  }\n}\n"]}