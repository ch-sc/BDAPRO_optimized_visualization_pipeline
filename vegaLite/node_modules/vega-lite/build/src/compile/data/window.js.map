{"version":3,"file":"window.js","sourceRoot":"","sources":["../../../../src/compile/data/window.ts"],"names":[],"mappings":"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","sourcesContent":["import {AggregateOp} from 'vega';\nimport {vgField} from '../../fielddef';\nimport {WindowFieldDef, WindowOnlyOp, WindowTransform} from '../../transform';\nimport {duplicate, hash} from '../../util';\nimport {VgComparator, VgComparatorOrder, VgWindowTransform} from '../../vega.schema';\nimport {StringSet, unique} from './../../util';\nimport {DataFlowNode} from './dataflow';\n\n/**\n * A class for the window transform nodes\n */\nexport class WindowTransformNode extends DataFlowNode {\n  public clone() {\n    return new WindowTransformNode(null, duplicate(this.transform));\n  }\n\n  constructor(parent: DataFlowNode, private readonly transform: WindowTransform) {\n    super(parent);\n  }\n\n  public addDimensions(fields: string[]) {\n    this.transform.groupby = unique(this.transform.groupby.concat(fields), d => d);\n  }\n\n  public dependentFields() {\n    const out = {};\n\n    this.transform.groupby.forEach(f => (out[f] = true));\n    this.transform.sort.forEach(m => (out[m.field] = true));\n    this.transform.window\n      .map(w => w.field)\n      .filter(f => f !== undefined)\n      .forEach(f => (out[f] = true));\n\n    return out;\n  }\n\n  public producedFields(): StringSet {\n    const out = {};\n    this.transform.window.forEach(windowFieldDef => (out[this.getDefaultName(windowFieldDef)] = true));\n\n    return out;\n  }\n\n  private getDefaultName(windowFieldDef: WindowFieldDef): string {\n    return windowFieldDef.as || vgField(windowFieldDef);\n  }\n\n  public hash() {\n    return `WindowTransform ${hash(this.transform)}`;\n  }\n\n  public assemble(): VgWindowTransform {\n    const fields: string[] = [];\n    const ops: (AggregateOp | WindowOnlyOp)[] = [];\n    const as = [];\n    const params = [];\n    for (const window of this.transform.window) {\n      ops.push(window.op);\n      as.push(this.getDefaultName(window));\n      params.push(window.param === undefined ? null : window.param);\n      fields.push(window.field === undefined ? null : window.field);\n    }\n\n    const frame = this.transform.frame;\n    const groupby = this.transform.groupby;\n    const sortFields: string[] = [];\n    const sortOrder: VgComparatorOrder[] = [];\n    if (this.transform.sort !== undefined) {\n      for (const sortField of this.transform.sort) {\n        sortFields.push(sortField.field);\n        sortOrder.push(sortField.order || 'ascending');\n      }\n    }\n    const sort: VgComparator = {\n      field: sortFields,\n      order: sortOrder\n    };\n    const ignorePeers = this.transform.ignorePeers;\n\n    const result: VgWindowTransform = {\n      type: 'window',\n      params,\n      as,\n      ops,\n      fields,\n      sort\n    };\n\n    if (ignorePeers !== undefined) {\n      result.ignorePeers = ignorePeers;\n    }\n\n    if (groupby !== undefined) {\n      result.groupby = groupby;\n    }\n\n    if (frame !== undefined) {\n      result.frame = frame;\n    }\n\n    return result;\n  }\n}\n"]}