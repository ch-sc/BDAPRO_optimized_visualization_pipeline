{"version":3,"file":"optimizer.js","sourceRoot":"","sources":["../../../../src/compile/data/optimizer.ts"],"names":[],"mappings":";AAEA,OAAO,EAAC,UAAU,EAAC,MAAM,UAAU,CAAC;AAEpC;;;GAGG;AACH;IAEE;QACE,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IACxB,CAAC;IACD,4CAA4C;IACrC,kCAAU,GAAjB;QACE,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;IACvB,CAAC;IAED,sBAAI,sCAAW;aAAf;YACE,OAAO,IAAI,CAAC,QAAQ,CAAC;QACvB,CAAC;;;OAAA;IACH,oBAAC;AAAD,CAAC,AAbD,IAaC;AAED;;;GAGG;AACH;IAAgD,6CAAa;IAG3D;QAAA,YACE,iBAAO,SAER;QADC,KAAI,CAAC,SAAS,GAAG,KAAK,CAAC;;IACzB,CAAC;IAEM,uCAAW,GAAlB;QACE,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IACxB,CAAC;IAED,sBAAI,2CAAY;aAAhB;YACE,OAAO,IAAI,CAAC,SAAS,CAAC;QACxB,CAAC;;;OAAA;IAED,sBAAI,oCAAK;aAAT;YACE,OAAO,EAAC,YAAY,EAAE,IAAI,CAAC,YAAY,EAAE,WAAW,EAAE,IAAI,CAAC,WAAW,EAAC,CAAC;QAC1E,CAAC;aAED,UAAU,EAA2C;gBAA1C,8BAAY,EAAE,4BAAW;YAClC,IAAI,YAAY,EAAE;gBAChB,IAAI,CAAC,WAAW,EAAE,CAAC;aACpB;YACD,IAAI,WAAW,EAAE;gBACf,IAAI,CAAC,UAAU,EAAE,CAAC;aACnB;QACH,CAAC;;;OATA;IAaM,kDAAsB,GAA7B,UAA8B,IAAkB;QAC9C,IAAI,IAAI,YAAY,UAAU,EAAE;YAC9B,OAAO,KAAK,CAAC;SACd;QACD,IAAM,IAAI,GAAG,IAAI,CAAC,MAAM,CAAC;QAClB,IAAA,0CAAY,CAAmB;QACtC,IAAI,YAAY,EAAE;YAChB,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;SACnC;QACD,OAAO,IAAI,CAAC,WAAW,CAAC;IAC1B,CAAC;IACH,wBAAC;AAAD,CAAC,AA1CD,CAAgD,aAAa,GA0C5D;;AAED;;GAEG;AACH;IAA+C,4CAAa;IAA5D;;IAEA,CAAC;IAAD,uBAAC;AAAD,CAAC,AAFD,CAA+C,aAAa,GAE3D","sourcesContent":["import {DataFlowNode} from './dataflow';\nimport {OptimizerFlags} from './optimizers';\nimport {SourceNode} from './source';\n\n/**\n * Abstract base class for BottomUpOptimizer and TopDownOptimizer.\n * Contains only mutation handling logic. Subclasses need to implement iteration logic.\n */\nabstract class OptimizerBase {\n  private _mutated: boolean;\n  constructor() {\n    this._mutated = false;\n  }\n  // Once true, _mutated is never set to false\n  public setMutated() {\n    this._mutated = true;\n  }\n\n  get mutatedFlag() {\n    return this._mutated;\n  }\n}\n\n/**\n * Starts from a node and runs the optimization function(the \"run\" method) upwards to the root,\n * depending on the continueFlag and mutatedFlag values returned by the optimization function.\n */\nexport abstract class BottomUpOptimizer extends OptimizerBase {\n  private _continue: boolean;\n\n  constructor() {\n    super();\n    this._continue = false;\n  }\n\n  public setContinue() {\n    this._continue = true;\n  }\n\n  get continueFlag() {\n    return this._continue;\n  }\n\n  get flags(): OptimizerFlags {\n    return {continueFlag: this.continueFlag, mutatedFlag: this.mutatedFlag};\n  }\n\n  set flags({continueFlag, mutatedFlag}: OptimizerFlags) {\n    if (continueFlag) {\n      this.setContinue();\n    }\n    if (mutatedFlag) {\n      this.setMutated();\n    }\n  }\n\n  public abstract run(node: DataFlowNode): OptimizerFlags;\n\n  public optimizeNextFromLeaves(node: DataFlowNode): boolean {\n    if (node instanceof SourceNode) {\n      return false;\n    }\n    const next = node.parent;\n    const {continueFlag} = this.run(node);\n    if (continueFlag) {\n      this.optimizeNextFromLeaves(next);\n    }\n    return this.mutatedFlag;\n  }\n}\n\n/**\n * The optimizer function( the \"run\" method), is invoked on the given node and then continues recursively.\n */\nexport abstract class TopDownOptimizer extends OptimizerBase {\n  public abstract run(node: DataFlowNode): boolean;\n}\n"]}