{"version":3,"file":"transforms.js","sourceRoot":"","sources":["../../../../../src/compile/selection/transforms/transforms.ts"],"names":[],"mappings":"AAgBA,OAAO,MAAM,MAAM,UAAU,CAAC;AAC9B,OAAO,OAAO,MAAM,WAAW,CAAC;AAChC,OAAO,OAAO,MAAM,WAAW,CAAC;AAChC,OAAO,MAAM,MAAM,UAAU,CAAC;AAC9B,OAAO,MAAM,MAAM,UAAU,CAAC;AAC9B,OAAO,SAAS,MAAM,aAAa,CAAC;AACpC,OAAO,IAAI,MAAM,QAAQ,CAAC;AAC1B,IAAM,SAAS,GAA4B;IACzC,OAAO,SAAA;IACP,MAAM,QAAA;IACN,MAAM,QAAA;IACN,SAAS,WAAA;IACT,IAAI,MAAA;IACJ,MAAM,QAAA;IACN,OAAO,SAAA;CACR,CAAC;AAEF,MAAM,UAAU,gBAAgB,CAAC,OAA2B,EAAE,EAAmC;IAC/F,KAAK,IAAM,CAAC,IAAI,SAAS,EAAE;QACzB,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,EAAE;YAC7B,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;SAClB;KACF;AACH,CAAC","sourcesContent":["import {SelectionDef} from '../../../selection';\nimport {Dict} from '../../../util';\nimport {VgSignal} from '../../../vega.schema';\nimport {Model} from '../../model';\nimport {UnitModel} from '../../unit';\nimport {SelectionComponent} from '../selection';\n\nexport interface TransformCompiler {\n  has: (selCmpt: SelectionComponent | SelectionDef) => boolean;\n  parse?: (model: UnitModel, def: SelectionDef, selCmpt: SelectionComponent) => void;\n  signals?: (model: UnitModel, selCmpt: SelectionComponent, signals: VgSignal[]) => VgSignal[];\n  topLevelSignals?: (model: Model, selCmpt: SelectionComponent, signals: VgSignal[]) => VgSignal[];\n  modifyExpr?: (model: UnitModel, selCmpt: SelectionComponent, expr: string) => string;\n  marks?: (model: UnitModel, selCmpt: SelectionComponent, marks: any[]) => any[];\n}\n\nimport inputs from './inputs';\nimport nearest from './nearest';\nimport project from './project';\nimport scales from './scales';\nimport toggle from './toggle';\nimport translate from './translate';\nimport zoom from './zoom';\nconst compilers: Dict<TransformCompiler> = {\n  project,\n  toggle,\n  scales,\n  translate,\n  zoom,\n  inputs,\n  nearest\n};\n\nexport function forEachTransform(selCmpt: SelectionComponent, cb: (tx: TransformCompiler) => void) {\n  for (const t in compilers) {\n    if (compilers[t].has(selCmpt)) {\n      cb(compilers[t]);\n    }\n  }\n}\n"]}